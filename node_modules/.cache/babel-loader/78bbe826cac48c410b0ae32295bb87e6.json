{"ast":null,"code":"import { mainAPI } from '../api/api';\nconst SET_DATA = 'SET_DATA';\nconst SET_INFO = 'SET_INFO';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_CHARACTER = 'SET_CHARACTER';\nconst SET_CHARACTERs_IN_EPISODE = 'SET_CHARACTERs_IN_EPISODE';\nconst SET_EPISODES = 'SET_EPISODES';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst initialState = {\n  data: [],\n  info: {},\n  currentPage: 1,\n  character: {},\n  episodes: [],\n  charactersInEpisode: [],\n  isFetching: false\n};\nexport const mainReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_DATA:\n      return { ...state,\n        data: action.data\n      };\n\n    case SET_INFO:\n      return { ...state,\n        info: action.info\n      };\n\n    case SET_CHARACTER:\n      return { ...state,\n        character: action.character\n      };\n\n    case SET_CHARACTERs_IN_EPISODE:\n      return { ...state,\n        charactersInEpisode: action.charactersInEpisode\n      };\n\n    case SET_EPISODES:\n      return { ...state,\n        episodes: action.episodes\n      };\n\n    case TOGGLE_IS_FETCHING:\n      return { ...state,\n        isFetching: action.isFetching\n      };\n\n    case SET_CURRENT_PAGE:\n      return { ...state,\n        currentPage: action.currentPage\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst setData = data => ({\n  type: SET_DATA,\n  data\n});\n\nconst setInfo = info => ({\n  type: SET_INFO,\n  info\n});\n\nconst toggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\n\nconst setCharacter = character => ({\n  type: SET_CHARACTER,\n  character\n});\n\nconst setCharactersInEpisode = charactersInEpisode => ({\n  type: SET_CHARACTERs_IN_EPISODE,\n  charactersInEpisode\n});\n\nconst setEpisodes = episodes => ({\n  type: SET_EPISODES,\n  episodes\n});\n\nconst setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\n\nexport const requestData = page => async dispatch => {\n  dispatch(toggleIsFetching(true));\n  const response = await mainAPI.getData(page);\n\n  if (response.status === 200) {\n    dispatch(setData(response.data.results));\n    dispatch(setInfo(response.data.info));\n    dispatch(toggleIsFetching(false));\n  } else {\n    console.log(response);\n    dispatch(toggleIsFetching(false));\n  }\n};\n\nconst requestCharacterCard = response => async dispatch => {\n  let allEpisodes = [];\n  response.data.episode.forEach(el => {\n    const id = el.split('/').pop();\n    allEpisodes.push(id);\n  });\n  const responseEpisodes = await mainAPI.getEpisodes(allEpisodes);\n\n  if (responseEpisodes.status === 200) {\n    let queryString = responseEpisodes.data.characters[0] + ',' + responseEpisodes.data.characters[1];\n    const responseCharacters = await mainAPI.getCharacter(queryString);\n\n    if (responseCharacters.status == 200) {\n      let dataArr = [].concat(responseEpisodes.data);\n      dispatch(setEpisodes(dataArr.map));\n    }\n  } else console.log(responseEpisodes);\n};\n\nexport const requestCharacter = id => async dispatch => {\n  dispatch(toggleIsFetching(true));\n  const response = await mainAPI.getCharacter(id);\n\n  if (response.status === 200) {\n    dispatch(setCharacter(response.data));\n    requestCharacterCard(response);\n    dispatch(toggleIsFetching(false));\n  } else {\n    console.log(response);\n    dispatch(toggleIsFetching(false));\n  }\n};\nexport const changePage = page => async dispatch => dispatch(setCurrentPage(page));","map":{"version":3,"names":["mainAPI","SET_DATA","SET_INFO","SET_CURRENT_PAGE","SET_CHARACTER","SET_CHARACTERs_IN_EPISODE","SET_EPISODES","TOGGLE_IS_FETCHING","initialState","data","info","currentPage","character","episodes","charactersInEpisode","isFetching","mainReducer","state","action","type","setData","setInfo","toggleIsFetching","setCharacter","setCharactersInEpisode","setEpisodes","setCurrentPage","requestData","page","dispatch","response","getData","status","results","console","log","requestCharacterCard","allEpisodes","episode","forEach","el","id","split","pop","push","responseEpisodes","getEpisodes","queryString","characters","responseCharacters","getCharacter","dataArr","concat","map","requestCharacter","changePage"],"sources":["/Users/matveystepanov/Documents/HSS_React_2_year/src/redux/main-reducer.js"],"sourcesContent":["import { mainAPI } from '../api/api';\n\nconst SET_DATA = 'SET_DATA'\nconst SET_INFO = 'SET_INFO'\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\nconst SET_CHARACTER = 'SET_CHARACTER'\nconst SET_CHARACTERs_IN_EPISODE = 'SET_CHARACTERs_IN_EPISODE'\nconst SET_EPISODES = 'SET_EPISODES'\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\n\nconst initialState = {\n    data: [],\n    info: {},\n    currentPage: 1,\n    character: {},\n    episodes: [],\n    charactersInEpisode: [],\n    isFetching: false\n}\n\nexport const mainReducer = (state = initialState, action) => {\n    switch (action.type){\n        case SET_DATA: \n            return {...state, data: action.data}\n        case SET_INFO: \n            return {...state, info: action.info}\n        case SET_CHARACTER: \n            return {...state, character: action.character}\n        case SET_CHARACTERs_IN_EPISODE: \n            return {...state, charactersInEpisode: action.charactersInEpisode}\n        case SET_EPISODES: \n            return {...state, episodes: action.episodes}\n        case TOGGLE_IS_FETCHING: \n            return {...state, isFetching: action.isFetching}\n        case SET_CURRENT_PAGE: \n            return {...state, currentPage: action.currentPage}\n        default: \n            return state\n    }\n}\n\nconst setData = (data) => ({type: SET_DATA, data})\nconst setInfo = (info) => ({type: SET_INFO, info})\nconst toggleIsFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching})\nconst setCharacter = (character) => ({type: SET_CHARACTER, character})\nconst setCharactersInEpisode = (charactersInEpisode) => ({type: SET_CHARACTERs_IN_EPISODE, charactersInEpisode})\nconst setEpisodes = (episodes) => ({type: SET_EPISODES, episodes})\nconst setCurrentPage = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage})\n\nexport const requestData = (page) => async (dispatch) => {\n    dispatch(toggleIsFetching(true))\n    const response = await mainAPI.getData(page)\n    if(response.status === 200){\n        dispatch(setData(response.data.results))\n        dispatch(setInfo(response.data.info))\n        dispatch(toggleIsFetching(false))\n    }else{\n        console.log(response);\n        dispatch(toggleIsFetching(false))\n    }\n}\n\nconst requestCharacterCard = (response) => async (dispatch) => {\n    let allEpisodes = []\n\n    response.data.episode.forEach(el => {\n        const id = el.split('/').pop()\n        allEpisodes.push(id)\n    })\n\n    const responseEpisodes = await mainAPI.getEpisodes(allEpisodes)\n    if(responseEpisodes.status === 200){\n        let queryString = responseEpisodes.data.characters[0] + ',' + responseEpisodes.data.characters[1]\n        const responseCharacters = await mainAPI.getCharacter(queryString)\n        if(responseCharacters.status == 200){\n            let dataArr = [].concat(responseEpisodes.data)\n            dispatch(setEpisodes(dataArr.map))\n        }\n    }else console.log(responseEpisodes)\n}\n\nexport const requestCharacter = (id) => async (dispatch) => {\n    dispatch(toggleIsFetching(true))\n    const response = await mainAPI.getCharacter(id)\n    if(response.status === 200){\n        dispatch(setCharacter(response.data))\n        requestCharacterCard(response)\n        dispatch(toggleIsFetching(false))\n    }else{\n        console.log(response);\n        dispatch(toggleIsFetching(false))\n    }\n}\n\n\nexport const changePage = (page) => async (dispatch) => dispatch(setCurrentPage(page))"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AAEA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,yBAAyB,GAAG,2BAAlC;AACA,MAAMC,YAAY,GAAG,cAArB;AACA,MAAMC,kBAAkB,GAAG,oBAA3B;AAEA,MAAMC,YAAY,GAAG;EACjBC,IAAI,EAAE,EADW;EAEjBC,IAAI,EAAE,EAFW;EAGjBC,WAAW,EAAE,CAHI;EAIjBC,SAAS,EAAE,EAJM;EAKjBC,QAAQ,EAAE,EALO;EAMjBC,mBAAmB,EAAE,EANJ;EAOjBC,UAAU,EAAE;AAPK,CAArB;AAUA,OAAO,MAAMC,WAAW,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBT,YAAyB;EAAA,IAAXU,MAAW;;EACzD,QAAQA,MAAM,CAACC,IAAf;IACI,KAAKlB,QAAL;MACI,OAAO,EAAC,GAAGgB,KAAJ;QAAWR,IAAI,EAAES,MAAM,CAACT;MAAxB,CAAP;;IACJ,KAAKP,QAAL;MACI,OAAO,EAAC,GAAGe,KAAJ;QAAWP,IAAI,EAAEQ,MAAM,CAACR;MAAxB,CAAP;;IACJ,KAAKN,aAAL;MACI,OAAO,EAAC,GAAGa,KAAJ;QAAWL,SAAS,EAAEM,MAAM,CAACN;MAA7B,CAAP;;IACJ,KAAKP,yBAAL;MACI,OAAO,EAAC,GAAGY,KAAJ;QAAWH,mBAAmB,EAAEI,MAAM,CAACJ;MAAvC,CAAP;;IACJ,KAAKR,YAAL;MACI,OAAO,EAAC,GAAGW,KAAJ;QAAWJ,QAAQ,EAAEK,MAAM,CAACL;MAA5B,CAAP;;IACJ,KAAKN,kBAAL;MACI,OAAO,EAAC,GAAGU,KAAJ;QAAWF,UAAU,EAAEG,MAAM,CAACH;MAA9B,CAAP;;IACJ,KAAKZ,gBAAL;MACI,OAAO,EAAC,GAAGc,KAAJ;QAAWN,WAAW,EAAEO,MAAM,CAACP;MAA/B,CAAP;;IACJ;MACI,OAAOM,KAAP;EAhBR;AAkBH,CAnBM;;AAqBP,MAAMG,OAAO,GAAIX,IAAD,KAAW;EAACU,IAAI,EAAElB,QAAP;EAAiBQ;AAAjB,CAAX,CAAhB;;AACA,MAAMY,OAAO,GAAIX,IAAD,KAAW;EAACS,IAAI,EAAEjB,QAAP;EAAiBQ;AAAjB,CAAX,CAAhB;;AACA,MAAMY,gBAAgB,GAAIP,UAAD,KAAiB;EAACI,IAAI,EAAEZ,kBAAP;EAA2BQ;AAA3B,CAAjB,CAAzB;;AACA,MAAMQ,YAAY,GAAIX,SAAD,KAAgB;EAACO,IAAI,EAAEf,aAAP;EAAsBQ;AAAtB,CAAhB,CAArB;;AACA,MAAMY,sBAAsB,GAAIV,mBAAD,KAA0B;EAACK,IAAI,EAAEd,yBAAP;EAAkCS;AAAlC,CAA1B,CAA/B;;AACA,MAAMW,WAAW,GAAIZ,QAAD,KAAe;EAACM,IAAI,EAAEb,YAAP;EAAqBO;AAArB,CAAf,CAApB;;AACA,MAAMa,cAAc,GAAIf,WAAD,KAAkB;EAACQ,IAAI,EAAEhB,gBAAP;EAAyBQ;AAAzB,CAAlB,CAAvB;;AAEA,OAAO,MAAMgB,WAAW,GAAIC,IAAD,IAAU,MAAOC,QAAP,IAAoB;EACrDA,QAAQ,CAACP,gBAAgB,CAAC,IAAD,CAAjB,CAAR;EACA,MAAMQ,QAAQ,GAAG,MAAM9B,OAAO,CAAC+B,OAAR,CAAgBH,IAAhB,CAAvB;;EACA,IAAGE,QAAQ,CAACE,MAAT,KAAoB,GAAvB,EAA2B;IACvBH,QAAQ,CAACT,OAAO,CAACU,QAAQ,CAACrB,IAAT,CAAcwB,OAAf,CAAR,CAAR;IACAJ,QAAQ,CAACR,OAAO,CAACS,QAAQ,CAACrB,IAAT,CAAcC,IAAf,CAAR,CAAR;IACAmB,QAAQ,CAACP,gBAAgB,CAAC,KAAD,CAAjB,CAAR;EACH,CAJD,MAIK;IACDY,OAAO,CAACC,GAAR,CAAYL,QAAZ;IACAD,QAAQ,CAACP,gBAAgB,CAAC,KAAD,CAAjB,CAAR;EACH;AACJ,CAXM;;AAaP,MAAMc,oBAAoB,GAAIN,QAAD,IAAc,MAAOD,QAAP,IAAoB;EAC3D,IAAIQ,WAAW,GAAG,EAAlB;EAEAP,QAAQ,CAACrB,IAAT,CAAc6B,OAAd,CAAsBC,OAAtB,CAA8BC,EAAE,IAAI;IAChC,MAAMC,EAAE,GAAGD,EAAE,CAACE,KAAH,CAAS,GAAT,EAAcC,GAAd,EAAX;IACAN,WAAW,CAACO,IAAZ,CAAiBH,EAAjB;EACH,CAHD;EAKA,MAAMI,gBAAgB,GAAG,MAAM7C,OAAO,CAAC8C,WAAR,CAAoBT,WAApB,CAA/B;;EACA,IAAGQ,gBAAgB,CAACb,MAAjB,KAA4B,GAA/B,EAAmC;IAC/B,IAAIe,WAAW,GAAGF,gBAAgB,CAACpC,IAAjB,CAAsBuC,UAAtB,CAAiC,CAAjC,IAAsC,GAAtC,GAA4CH,gBAAgB,CAACpC,IAAjB,CAAsBuC,UAAtB,CAAiC,CAAjC,CAA9D;IACA,MAAMC,kBAAkB,GAAG,MAAMjD,OAAO,CAACkD,YAAR,CAAqBH,WAArB,CAAjC;;IACA,IAAGE,kBAAkB,CAACjB,MAAnB,IAA6B,GAAhC,EAAoC;MAChC,IAAImB,OAAO,GAAG,GAAGC,MAAH,CAAUP,gBAAgB,CAACpC,IAA3B,CAAd;MACAoB,QAAQ,CAACJ,WAAW,CAAC0B,OAAO,CAACE,GAAT,CAAZ,CAAR;IACH;EACJ,CAPD,MAOMnB,OAAO,CAACC,GAAR,CAAYU,gBAAZ;AACT,CAjBD;;AAmBA,OAAO,MAAMS,gBAAgB,GAAIb,EAAD,IAAQ,MAAOZ,QAAP,IAAoB;EACxDA,QAAQ,CAACP,gBAAgB,CAAC,IAAD,CAAjB,CAAR;EACA,MAAMQ,QAAQ,GAAG,MAAM9B,OAAO,CAACkD,YAAR,CAAqBT,EAArB,CAAvB;;EACA,IAAGX,QAAQ,CAACE,MAAT,KAAoB,GAAvB,EAA2B;IACvBH,QAAQ,CAACN,YAAY,CAACO,QAAQ,CAACrB,IAAV,CAAb,CAAR;IACA2B,oBAAoB,CAACN,QAAD,CAApB;IACAD,QAAQ,CAACP,gBAAgB,CAAC,KAAD,CAAjB,CAAR;EACH,CAJD,MAIK;IACDY,OAAO,CAACC,GAAR,CAAYL,QAAZ;IACAD,QAAQ,CAACP,gBAAgB,CAAC,KAAD,CAAjB,CAAR;EACH;AACJ,CAXM;AAcP,OAAO,MAAMiC,UAAU,GAAI3B,IAAD,IAAU,MAAOC,QAAP,IAAoBA,QAAQ,CAACH,cAAc,CAACE,IAAD,CAAf,CAAzD"},"metadata":{},"sourceType":"module"}